/// <reference path="../core/keycodes.ts" />
var LanguageHelper;
(function (LanguageHelper) {
    var Play;
    (function (Play) {
        var KeyCodes = LanguageHelper.Core.KeyCodes;
        const QuestionLimit = 10;
        class PlayController {
            constructor() {
                this.questionsAnswered = 0;
                this.correctAnswers = 0;
            }
            initialise() {
                this.view = new Play.PlayView();
                this.playData = new Play.PlayModel();
                this.correctionAnswers = new Play.PlayCorrectionAnswers();
                this.playData.words = new Array();
                this.playData.words = this.initialseModel();
                this.setQuestion();
                this.setupEventListeners();
            }
            setQuestion() {
                let questionWord = this.grabWord();
                let questionSentance = this.grabSentance(questionWord);
                let showEnglish = this.showEnglish();
                this.view.playQuestion = showEnglish ? questionSentance.englishSentance : questionSentance.translation;
                this.currentQuestion = showEnglish ? questionSentance.englishSentance : questionSentance.translation;
                this.currentAnswer = showEnglish ? questionSentance.translation : questionSentance.englishSentance;
                this.currentWordId = questionSentance.wordId;
                this.view.answerTextbox.val("");
            }
            grabWord() {
                return this.playData.words[this.getNext(this.playData.wordCount)];
            }
            grabSentance(word) {
                return word.sentances[this.getNext(word.sentanceCount)];
            }
            initialseModel() {
                let foundWords = new Array();
                let words = this.view.words;
                for (let i = 0; i < words.length; i++) {
                    let foundWord = new Play.PlayWord();
                    foundWord.word = this.view.translationWord(words[i]);
                    foundWord.englishWord = this.view.englishWord(words[i]);
                    foundWord.sentances = new Array();
                    let foundSentances = this.view.loadSentances(this.view.wordId(words[i]));
                    for (let j = 0; j < foundSentances.length; j++) {
                        let foundSentance = new Play.PlaySentance();
                        foundSentance.translation = this.view.translationSentance(foundSentances[j]);
                        foundSentance.englishSentance = this.view.englishSentance(foundSentances[j]);
                        foundSentance.wordId = this.view.wordId(foundSentances[j]);
                        foundWord.sentances.push(foundSentance);
                    }
                    foundWords.push(foundWord);
                }
                return foundWords;
            }
            setupEventListeners() {
                this.view.answerTextbox.on("keydown", (e) => {
                    // If enter/return was hit
                    if (e.keyCode === KeyCodes.Return) {
                        e.preventDefault();
                        this.checkAnswer();
                    }
                });
                this.view.checkButton.on("click", () => { this.checkAnswer(); });
            }
            checkAnswer() {
                let usersAnswer = this.view.playAnswer;
                if (usersAnswer.toLowerCase() === this.currentAnswer.toLowerCase()) {
                    alert("That was right!");
                    this.correctAnswers++;
                }
                else {
                    this.correctionAnswers.answers.push(new Play.PlayCorrectionAnswer(this.currentWordId, usersAnswer, this.currentAnswer));
                    alert("That was wrong!\nThe correct answer was " + this.currentAnswer);
                }
                this.questionsAnswered++;
                if (this.questionsAnswered < QuestionLimit) {
                    this.setQuestion();
                }
                else {
                    alert("Times up! You got " + this.correctAnswers + " questions correct.");
                    this.postAnswers();
                }
            }
            getNext(size) {
                return Math.floor(Math.random() * size);
            }
            showEnglish() {
                return Math.floor(Math.random() * 2) === 1;
            }
            postAnswers() {
                let i = 0;
                this.view.form.submit(() => {
                    this.correctionAnswers.answers.forEach((correctionAnswer) => {
                        $("<input />").attr("type", "hidden")
                            .attr("name", "finishPlayModel.CorrectionAnswers[" + i + "].WordId")
                            .attr("value", correctionAnswer.wordId)
                            .appendTo(this.view.form);
                        $("<input />").attr("type", "hidden")
                            .attr("name", "finishPlayModel.CorrectionAnswers[" + i + "].GivenAnswer")
                            .attr("value", correctionAnswer.givenAnswer)
                            .appendTo(this.view.form);
                        $("<input />").attr("type", "hidden")
                            .attr("name", "finishPlayModel.CorrectionAnswers[" + i + "].CorrectAnswer")
                            .attr("value", correctionAnswer.correctAnswer)
                            .appendTo(this.view.form);
                        i++;
                    });
                });
                this.view.form.submit();
            }
        }
        Play.PlayController = PlayController;
        $(document).ready(function () {
            let playcontroller = new PlayController();
            playcontroller.initialise();
        });
    })(Play = LanguageHelper.Play || (LanguageHelper.Play = {}));
})(LanguageHelper || (LanguageHelper = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
