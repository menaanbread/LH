/// <reference path="../typings/jquery.d.ts" />
/// <reference path="./ioc/container.ts" />
/// <reference path="./services/http-service/ihttpservice.ts" />
/// <reference path="./services/http-service/jquery-httpservice.ts" />
class Home {
    constructor(httpService) {
        this.httpService = httpService;
        this.SHOW_WORDS_URL = "Home/LanguageSet";
        this.showLanguageButton = new ShowHideButton();
        this.showLanguageButton.shouldShowWords = true;
        this.wordsArea = $("#wordsArea");
    }
    initialse() {
        if (this.showLanguageButton.isDefined() && this.wordsArea) {
            $(this.showLanguageButton.reference).click((e) => { this.onShowWordsClick(e); });
        }
    }
    onShowWordsClick(e) {
        if (this.showLanguageButton.shouldShowWords) {
            this.httpService.post(this.SHOW_WORDS_URL, { languageId: this.showLanguageButton.languageId }, (html) => this.populateWordsArea(html, this), this.handleAjaxError);
        }
        else {
            this.wordsArea.hide();
            this.showLanguageButton.shouldShowWords = true;
            this.showLanguageButton.buttonText = "Show Words";
        }
    }
    populateWordsArea(html, context) {
        context.wordsArea.show();
        context.wordsArea.html(html);
        context.showLanguageButton.shouldShowWords = false;
        context.showLanguageButton.buttonText = "Hide Words";
        let sentances = new ShowSentances(this.httpService);
        sentances.intialise();
    }
    handleAjaxError(errorMessage) {
        alert(errorMessage);
    }
}
class ShowHideButton {
    constructor() {
        this.reference = $("#showHideWords");
    }
    isDefined() {
        return this.reference && this.reference !== undefined;
    }
    get languageId() {
        let languageid = 0;
        if (this.isDefined()) {
            languageid = $(".select-language:checked").data("languageid");
        }
        return languageid;
    }
    get shouldShowWords() {
        let showOption = true;
        if (this.isDefined()) {
            showOption = $(this.reference).data("show");
        }
        return showOption;
    }
    set shouldShowWords(show) {
        if (this.isDefined()) {
            $(this.reference).data("show", show);
        }
    }
    set buttonText(buttonText) {
        if (this.isDefined) {
            $(this.reference).text(buttonText);
        }
    }
}
class ShowSentances {
    constructor(httpService) {
        this.httpService = httpService;
        this.LIST_SENTANCES_URL = "Home/ListSentances";
        this.reference = $("#sentances-modal");
    }
    intialise() {
        if (this.reference) {
            this.reference.on("show.bs.modal", (e) => this.populateAndShow(e, this));
        }
    }
    populateAndShow(e, context) {
        this.httpService.post(context.LIST_SENTANCES_URL, { wordId: $(e.relatedTarget).data("wordid") }, context.populatePopup, context.handleAjaxError);
    }
    populatePopup(html) {
        $(".modal-body").html(html);
    }
    handleAjaxError(errorMessage) {
        alert(errorMessage);
    }
}
$(document).ready(function () {
    let container = new IoC.IocContainer();
    container.install("IHttpService", HttpService.JQueryHttpService);
    let httpService = container.resolve("IHttpService");
    let home = new Home(httpService);
    home.initialse();
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
