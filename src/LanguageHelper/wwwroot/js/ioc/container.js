var IoC;
(function (IoC) {
    (function (LifeStyle) {
        LifeStyle[LifeStyle["Singleton"] = 0] = "Singleton";
        LifeStyle[LifeStyle["Transient"] = 1] = "Transient";
    })(IoC.LifeStyle || (IoC.LifeStyle = {}));
    var LifeStyle = IoC.LifeStyle;
    class IocContainer {
        constructor() {
            this._dependencyContainer = new DependencyContainer();
        }
        register(interfaceName, type, lifestyle) {
            switch (lifestyle) {
                case LifeStyle.Singleton:
                    let dependency = new type();
                    this._dependencyContainer.add(interfaceName, () => dependency);
                    break;
                case LifeStyle.Transient:
                    this._dependencyContainer.add(interfaceName, () => new type());
                    break;
            }
        }
        resolve(interfaceName) {
            return this._dependencyContainer.resolve(interfaceName);
        }
    }
    IoC.IocContainer = IocContainer;
    class DependencyContainer {
        constructor() {
            this._interfaces = new Array();
            this._implementations = new Array();
        }
        add(interfaceName, resolution) {
            this._interfaces.push(interfaceName);
            this._implementations.push(resolution);
        }
        resolve(interfaceName) {
            let dependencyIndex = this._interfaces.indexOf(interfaceName);
            return this._implementations[dependencyIndex]();
        }
    }
})(IoC || (IoC = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlvYy9jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxHQUFHLENBcURUO0FBckRELFdBQU8sR0FBRyxFQUFDLENBQUM7SUFDUixXQUFZLFNBQVM7UUFDakIsbURBQVMsQ0FBQTtRQUNULG1EQUFTLENBQUE7SUFDYixDQUFDLEVBSFcsYUFBUyxLQUFULGFBQVMsUUFHcEI7SUFIRCxJQUFZLFNBQVMsR0FBVCxhQUdYLENBQUE7SUFRRDtRQUFBO1lBRVkseUJBQW9CLEdBQXdCLElBQUksbUJBQW1CLEVBQUUsQ0FBQztRQWlCbEYsQ0FBQztRQWZVLFFBQVEsQ0FBOEIsYUFBcUIsRUFBRSxJQUFpQyxFQUFFLFNBQW9CO1lBQ3ZILE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLEtBQUssU0FBUyxDQUFDLFNBQVM7b0JBQ3BCLElBQUksVUFBVSxHQUFvQixJQUFJLElBQUksRUFBRSxDQUFDO29CQUM3QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQyxDQUFDO29CQUMvRCxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxTQUFTLENBQUMsU0FBUztvQkFDcEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQy9ELEtBQUssQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDO1FBRU0sT0FBTyxDQUFhLGFBQXFCO1lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFhLGFBQWEsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7SUFDTCxDQUFDO0lBbkJZLGdCQUFZLGVBbUJ4QixDQUFBO0lBRUQ7UUFLSTtZQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztZQUN2QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxLQUFLLEVBQWdCLENBQUM7UUFDcEQsQ0FBQztRQUVNLEdBQUcsQ0FBYSxhQUFxQixFQUFFLFVBQTRCO1lBQ3RFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUVNLE9BQU8sQ0FBYSxhQUFxQjtZQUM1QyxJQUFJLGVBQWUsR0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN0RSxNQUFNLENBQWEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUM7UUFDaEUsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDLEVBckRNLENBb0RGLEVBcERLLEtBQUgsR0FBRyxRQXFEVCIsImZpbGUiOiJpb2MvY29udGFpbmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIElvQyB7XG4gICAgZXhwb3J0IGVudW0gTGlmZVN0eWxlIHtcbiAgICAgICAgU2luZ2xldG9uLFxuICAgICAgICBUcmFuc2llbnRcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb250YWluZXIge1xuXG4gICAgICAgIHJlZ2lzdGVyPFRJbnRlcmZhY2UsIFRJbXBsZW1lbnRhdGlvbj4oaW50ZXJmYWNlTmFtZTogc3RyaW5nLCB0eXBlOiB7IG5ldygpOiBUSW1wbGVtZW50YXRpb247IH0sIGxpZmVzdHlsZTogTGlmZVN0eWxlKTogdm9pZDtcbiAgICAgICAgcmVzb2x2ZTxUSW50ZXJmYWNlPihpbnRlcmZhY2VOYW1lOiBzdHJpbmcpOiBUSW50ZXJmYWNlO1xuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBJb2NDb250YWluZXIgaW1wbGVtZW50cyBJQ29udGFpbmVyIHtcblxuICAgICAgICBwcml2YXRlIF9kZXBlbmRlbmN5Q29udGFpbmVyOiBEZXBlbmRlbmN5Q29udGFpbmVyID0gbmV3IERlcGVuZGVuY3lDb250YWluZXIoKTtcblxuICAgICAgICBwdWJsaWMgcmVnaXN0ZXI8VEludGVyZmFjZSwgVEltcGxlbWVudGF0aW9uPihpbnRlcmZhY2VOYW1lOiBzdHJpbmcsIHR5cGU6IHsgbmV3KCk6IFRJbXBsZW1lbnRhdGlvbjsgfSwgbGlmZXN0eWxlOiBMaWZlU3R5bGUpOiB2b2lkIHtcbiAgICAgICAgICAgIHN3aXRjaCAobGlmZXN0eWxlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBMaWZlU3R5bGUuU2luZ2xldG9uOlxuICAgICAgICAgICAgICAgICAgICBsZXQgZGVwZW5kZW5jeTogVEltcGxlbWVudGF0aW9uID0gbmV3IHR5cGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVwZW5kZW5jeUNvbnRhaW5lci5hZGQoaW50ZXJmYWNlTmFtZSwgKCkgPT4gZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTGlmZVN0eWxlLlRyYW5zaWVudDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVwZW5kZW5jeUNvbnRhaW5lci5hZGQoaW50ZXJmYWNlTmFtZSwgKCkgPT4gbmV3IHR5cGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc29sdmU8VEludGVyZmFjZT4oaW50ZXJmYWNlTmFtZTogc3RyaW5nKTogVEludGVyZmFjZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVwZW5kZW5jeUNvbnRhaW5lci5yZXNvbHZlPFRJbnRlcmZhY2U+KGludGVyZmFjZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3MgRGVwZW5kZW5jeUNvbnRhaW5lciB7XG5cbiAgICAgICAgcHJpdmF0ZSBfaW50ZXJmYWNlczogQXJyYXk8c3RyaW5nPjtcbiAgICAgICAgcHJpdmF0ZSBfaW1wbGVtZW50YXRpb25zOiBBcnJheTwoKSA9PiBPYmplY3Q+O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgIHRoaXMuX2ludGVyZmFjZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuICAgICAgICAgIHRoaXMuX2ltcGxlbWVudGF0aW9ucyA9IG5ldyBBcnJheTwoKSA9PiBPYmplY3Q+KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkPFRJbnRlcmZhY2U+KGludGVyZmFjZU5hbWU6IHN0cmluZywgcmVzb2x1dGlvbjogKCkgPT4gVEludGVyZmFjZSk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJmYWNlcy5wdXNoKGludGVyZmFjZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy5faW1wbGVtZW50YXRpb25zLnB1c2gocmVzb2x1dGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVzb2x2ZTxUSW50ZXJmYWNlPihpbnRlcmZhY2VOYW1lOiBzdHJpbmcpOiBUSW50ZXJmYWNlIHtcbiAgICAgICAgICAgIGxldCBkZXBlbmRlbmN5SW5kZXg6IG51bWJlciA9IHRoaXMuX2ludGVyZmFjZXMuaW5kZXhPZihpbnRlcmZhY2VOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiA8VEludGVyZmFjZT50aGlzLl9pbXBsZW1lbnRhdGlvbnNbZGVwZW5kZW5jeUluZGV4XSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
